"""
Report Generator
"""
from datetime import datetime


class ReportGenerator:
    """Generate reports"""
    
    def generate_markdown_report(self, results, code):
        """Generate markdown report"""
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        report = f"""# DevInsight AI - Code Analysis Report

**Generated:** {timestamp}

---

## 📊 Executive Summary

- **Total Lines:** {results['metrics']['total_lines']}
- **Code Lines:** {results['metrics']['code_lines']}
- **Functions:** {results['metrics']['functions_count']}
- **Classes:** {results['metrics']['classes_count']}
- **Complexity Score:** {results['metrics']['complexity_score']}

---

## 🔍 Functions

"""
        
        for func in results['functions']:
            report += f"""### {func['name']}()
- **Line:** {func['line_number']}
- **Arguments:** {', '.join(func['args']) if func['args'] else 'None'}
- **Complexity:** {func['complexity']}
- **Documented:** {'✅' if func['docstring'] else '❌'}

"""
        
        if results['classes']:
            report += "\n## 🏗️ Classes\n\n"
            for cls in results['classes']:
                report += f"### {cls['name']}\n"
                report += f"- **Methods:** {', '.join(cls['methods'])}\n\n"
        
        if results['suggestions']:
            report += "\n## 💡 Suggestions\n\n"
            for i, sugg in enumerate(results['suggestions'], 1):
                report += f"{i}. **{sugg['title']}**\n"
                report += f"   - {sugg['message']}\n\n"
        
        report += "\n---\n*Generated by DevInsight AI*\n"
        
        return report